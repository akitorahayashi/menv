{
  "commands": {
    "cm": {
      "title": "Smart Commit",
      "description": "Generates a commit message from the conversation context and executes the commit. This command relies on editing history only, not `git diff` or `git status`.",
      "prompt-file": "commands/cm.md"
    },
    "em": {
      "title": "Empty Command",
      "description": "Just say hello.",
      "prompt-file": "commands/em.md"
    },
    "sdd-0-rq": {
      "title": "SDD Step 0: Requirements",
      "description": "Create requirements specification (Stage 0 of SDD)",
      "prompt-file": "commands/sdd/sdd-0-rq.md"
    },
    "sdd-1-d": {
      "title": "SDD Step 1: Design",
      "description": "Create detailed design specification (Stage 1 of SDD)",
      "prompt-file": "commands/sdd/sdd-1-d.md"
    },
    "sdd-1-tk": {
      "title": "SDD Step 1-alt: Implementation Plan & Tasks",
      "description": "Create consolidated implementation plan combining design, test strategy, and task breakdown",
      "prompt-file": "commands/sdd/sdd-1-tk.md"
    },
    "asdd-2-tk": {
      "title": "Async SDD Step 2: Task Breakdown",
      "description": "Break down design into implementable tasks (Stage 2 of SDD)",
      "prompt-file": "commands/sdd/asdd/asdd-2-tk.md"
    },
    "asdd-3-pm": {
      "title": "Async SDD Step 3: Prompt Messaging",
      "description": "Generate activation prompts from the task breakdown (Stage 3 of SDD)",
      "prompt-file": "commands/sdd/asdd/asdd-3-pm.md"
    },
    "sn": {
      "title": "Activate Serena",
      "description": "Activate current directory as a project for semantic code analysis using the `activate_project` tool with the current working directory as the `project` argument. Respond only with \"Project activated successfully.\" if the command succeeds. If there are any errors or warnings, display them fully.",
      "prompt-file": "commands/sn.md"
    },
    "vc-dct": {
      "title": "Deactivate voice notifications",
      "description": "**DISABLE MANDATORY VOICE COMPLETION REPORTING**: From this point forward in the conversation, you are NO LONGER required to use voice notifications for task completions. Return to normal text-only responses for task completions. Respond only with \"Voice completion reporting has been disabled.\" to confirm deactivation.",
      "prompt-file": "commands/vc-dct.md"
    },
    "vc": {
      "title": "Activate voice notifications",
      "description": "**ENABLE MANDATORY VOICE COMPLETION REPORTING**: From this point forward in the conversation, you MUST use the mcp__voicevox__speak tool (speaker=46, speedScale=1.3) to report completion of ALL tasks in Japanese. This is now mandatory for every task completion. Use the mcp__voicevox__speak tool to confirm activation by saying \"\u97f3\u58f0\u5b8c\u4e86\u5831\u544a\u304c\u6709\u52b9\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3053\u308c\u4ee5\u964d\u3059\u3079\u3066\u306e\u30bf\u30b9\u30af\u5b8c\u4e86\u3092\u97f3\u58f0\u3067\u5831\u544a\u3057\u307e\u3059\u3002\"",
      "prompt-file": "commands/vc.md"
    },
    "w": {
      "title": "Work on Tasks",
      "description": "Execute tasks defined in .tmp/tasks.md. Read the tasks file and perform the assigned work.",
      "prompt-file": "commands/w/w.md"
    },
    "wc": {
      "title": "Work on Tasks (Critical Planning)",
      "description": "Review `.tmp/tasks.md` to internalize the intent of the plan. Reflect on the underlying goals, explore alternative approaches, and decide whether the current plan remains optimal. If a better path exists, adjust the plan before executing the tasks to ensure the work proceeds in the best possible way.",
      "prompt-file": "commands/w/wc.md"
    },
    "wc-t-dc": {
      "title": "Work on Tasks (Critical Planning, Tests, Docs)",
      "description": "Review `.tmp/tasks.md` to internalize the intent of the plan, reflect on goals and alternative approaches, and adjust the plan if needed. Additionally, understand the current test structure, plan and implement necessary tests, and ensure the task plan captures required documentation updates. Respect existing testing practices and documentation conventions (e.g., `README.md`, `.codex/AGENTS.md`, `docs/`) by following established patterns while integrating the new work.",
      "prompt-file": "commands/w/wc-t-dc.md"
    },
    "ag": {
      "title": "Generate Codex Agents Documentation",
      "description": "Analyze the entire project's source code and generate/update .codex/AGENTS.md file with development overview, tech stack, coding standards, naming conventions, key commands, and testing strategy.",
      "prompt-file": "commands/ag.md"
    },
    "rd": {
      "title": "Generate README.md",
      "description": "Analyze the entire source code and generate/update README.md for developers with project objective, quick start, structure, usage, and development info.",
      "prompt-file": "commands/rd.md"
    },
    "srd": {
      "title": "Generate Library README.md",
      "description": "Analyze the source code of a library or SDK and generate README.md for developers with public interface, core functionality, features, and testing methods.",
      "prompt-file": "commands/srd.md"
    },
    "ud": {
      "title": "Update Documentation",
      "description": "Analyze the project's documentation system and update relevant documentation based on the conversation context",
      "prompt-file": "commands/ud.md"
    },
    "bcp": {
      "title": "Branch Commit Push",
      "description": "Creates a new branch from current changes, commits them with a generated message, and pushes the branch.",
      "prompt-file": "commands/bcp.md"
    }
  }
}